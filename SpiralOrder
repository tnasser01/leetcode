//Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

//Example 1:

//Input:
//[
 //[ 1, 2, 3 ],
 //[ 4, 5, 6 ],
 //[ 7, 8, 9 ]
//]
//Output: [1,2,3,6,9,8,7,4,5]
//Example 2:

//Input:
//[
//  [1, 2, 3, 4],
//  [5, 6, 7, 8],
//  [9,10,11,12]
//]
//Output: [1,2,3,4,8,12,11,10,9,5,6,7]


class Solution {
    
    public List<Integer> spiralOrder(int[][] matrix) {
        if(matrix.length == 0 || matrix[0].length == 0) { return new ArrayList<Integer>();}
        List<Integer> list = new ArrayList<Integer>();
        
        int top = 0;
        int bottom = matrix.length-1;
        int left = 0;
        int right = matrix[0].length-1;
        
        //Traversing in a spiral order, we add each element to the list
        while(true) {
            for(int i=left; i <=right; i++) 
                list.add(matrix[top][i]);            
            top++;
            
            if(left > right || top > bottom) 
                break;
            
            for(int i=top; i<= bottom; i++ ) 
                list.add(matrix[i][right]);
            right--;
            
            if(left > right || top > bottom) 
                break;

            for(int i=right; i>=left; i--) 
                list.add(matrix[bottom][i]);
            bottom--;
            
            if(left > right || top > bottom) 
                break;

            for(int i=bottom; i>= top; i--) 
                list.add(matrix[i][left]);
            left++;
            
            if(left > right || top > bottom) 
                break;
        }
        return list;
    }
}
